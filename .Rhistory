) +
theme_bw() +
scale_fill_manual(values = c("white" = "white", "black" = "black"))
# Get data
openings <- read.csv("./UseableCSV/openings.csv")
# Change moves into positions
# e4 -> (5, 4)
openings <- openings %>%
rowwise() %>%
mutate(pos = list(move_to_pos(first_move))) %>%
unnest_wider(pos, names_sep = "_") %>%
rename(x = pos_1, y = pos_2)
# Plot
ggplot(openings, aes(x = x, y = y, fill=count)) +
geom_tile(width = 0.9, height = 0.9, color = "black") +
scale_x_continuous(breaks = 1:8, labels = c("a", "b", "c", "d", "e", "f", "g", "h"), limits = c(1, 8)) +
scale_y_continuous(breaks = 1:8, limits = c(1, 8)) +
scale_fill_viridis_c(trans = "log") +
coord_fixed() +
labs(title = paste("Who Wins with Opening Moves"),
subtitle = "Split on who won the game",
caption = "The count is using a log scale to be able to see lower values.",
fill = "Count",
x =  "Column", y = "Row") +
theme_bw() +
facet_wrap(~ outcome)
castle_w <- read.csv("./UseableCSV/castle_winners.csv")
ggplot(castle_w, aes(x = outcome, y = count, fill = castling_player)) +
geom_bar(stat = "identity", color="black", position = position_dodge(width = 0.7), width = 0.6) +
coord_flip() +
labs(
title = "Castle",
subtitle = "sub",
caption = "cap",
x = "Side",
y = "Count",
fill = "Player"
) +
theme_bw() +
scale_fill_manual(values = c("white" = "white", "black" = "black"))
castle_w <- read.csv("./UseableCSV/castle_winners.csv")
ggplot(castle_w, aes(x = outcome, y = count, fill = castling_player)) +
geom_bar(stat = "identity", color="black", position = position_dodge(width = 0.7), width = 0.6) +
coord_flip() +
labs(
title = "Castle",
subtitle = "sub",
caption = "cap",
x = "Outcome",
y = "Count",
fill = "Player"
) +
theme_bw() +
scale_fill_manual(values = c("white" = "white", "black" = "black"))
castle_w <- read.csv("./UseableCSV/castle_winners.csv")
ggplot(castle_w, aes(x = outcome, y = count, fill = castling_player)) +
geom_bar(stat = "identity", color="black", position = position_dodge(width = 0.7), width = 0.6) +
coord_flip() +
labs(
title = "Castling to Victory",
subtitle = "Who wins from castling",
caption = "Outcome of games when a player castled",
x = "Outcome",
y = "Count of Castling",
fill = "Player"
) +
theme_bw() +
scale_fill_manual(values = c("white" = "white", "black" = "black"))
promotion_w <- read.csv("./UseableCSV/promotion_wins.csv")
ggplot(promotion_w, aes(x = outcome, y = count, fill = promotes)) +
geom_bar(stat = "identity", color="black", position = position_dodge(width = 0.7), width = 0.6) +
coord_flip() +
labs(
title = "Castling to Victory",
subtitle = "Who wins from castling",
caption = "Outcome of games when a player castled",
x = "Outcome",
y = "Count of Castling",
fill = "Player"
) +
theme_bw() +
scale_fill_manual(values = c("white" = "white", "black" = "black"))
promotion_w <- read.csv("./UseableCSV/promotion_wins.csv")
ggplot(promotion_w, aes(x = outcome, y = count, fill = promotes)) +
geom_bar(stat = "identity", color="black", position = position_dodge(width = 0.7), width = 0.6) +
coord_flip() +
labs(
title = "Promote Your Winrate?",
subtitle = "Do promotions actually win games? (Yes, yes they do)",
caption = "Outcome of games where a player promoted",
x = "Game Outcome",
y = "Count of Promotions",
fill = "Player"
) +
theme_bw() +
scale_fill_manual(values = c("white" = "white", "black" = "black"))
# Get data
promote_o <- read.csv("./UseableCSV/promotion_opening.csv")
# Get data
promote_o <- read.csv("./UseableCSV/promote_opening.csv")
# Change moves into positions
# e4 -> (5, 4)
promote_o <- promote_o %>%
rowwise() %>%
mutate(pos = list(move_to_pos(first_move))) %>%
unnest_wider(pos, names_sep = "_") %>%
rename(x = pos_1, y = pos_2)
# Plot
ggplot(promote_o, aes(x = x, y = y, fill=count)) +
geom_tile(width = 0.9, height = 0.9, color = "black") +
scale_x_continuous(breaks = 1:8, labels = c("a", "b", "c", "d", "e", "f", "g", "h"), limits = c(1, 8)) +
scale_y_continuous(breaks = 1:8, limits = c(1, 8)) +
scale_fill_viridis_c() +
coord_fixed() +
labs(title = paste("Who Wins with Opening Moves"),
subtitle = "Split on who won the game",
caption = "The count is using a log scale to be able to see lower values.",
fill = "Count",
x =  "Column", y = "Row") +
theme_bw() +
facet_wrap(~ outcome)
# Get data
promote_o <- read.csv("./UseableCSV/promote_opening.csv")
# Change moves into positions
# e4 -> (5, 4)
promote_o <- promote_o %>%
rowwise() %>%
mutate(pos = list(move_to_pos(first_move))) %>%
unnest_wider(pos, names_sep = "_") %>%
rename(x = pos_1, y = pos_2)
# Plot
ggplot(promote_o, aes(x = x, y = y, fill=count)) +
geom_tile(width = 0.9, height = 0.9, color = "black") +
scale_x_continuous(breaks = 1:8, labels = c("a", "b", "c", "d", "e", "f", "g", "h"), limits = c(1, 8)) +
scale_y_continuous(breaks = 1:8, limits = c(1, 8)) +
scale_fill_viridis_c() +
coord_fixed() +
labs(title = paste("Who Wins with Opening Moves"),
subtitle = "Split on who won the game",
caption = "The count is using a log scale to be able to see lower values.",
fill = "Count",
x =  "Column", y = "Row") +
theme_bw() +
facet_wrap(~ player)
# Get data
promote_o <- read.csv("./UseableCSV/promote_opening.csv")
# Change moves into positions, and flip board
# e4 -> (5, 4)
promote_o <- promote_o %>%
rowwise() %>%
mutate(pos = if_else(player == "black", list(flip_square_pos(first_move)), list(square_to_pos(first_move)))) %>%
unnest_wider(pos, names_sep = "_") %>%
rename(x = pos_1, y = pos_2)
# Get data
promote_o <- read.csv("./UseableCSV/promote_opening.csv")
# Change moves into positions, and flip board
# e4 -> (5, 4)
promote_o <- promote_o %>%
rowwise() %>%
mutate(pos = if_else(player == "black", list(move_to_pos(first_move)), list(move_to_pos(first_move)))) %>%
unnest_wider(pos, names_sep = "_") %>%
rename(x = pos_1, y = pos_2)
promote_o$player <- factor(moves$player, levels = c("white", "black"))
# Get data
promote_o <- read.csv("./UseableCSV/promote_opening.csv")
# Change moves into positions, and flip board
# e4 -> (5, 4)
promote_o <- promote_o %>%
rowwise() %>%
mutate(pos = if_else(player == "black", list(move_to_pos(first_move)), list(move_to_pos(first_move)))) %>%
unnest_wider(pos, names_sep = "_") %>%
rename(x = pos_1, y = pos_2)
#promote_o$player <- factor(moves$player, levels = c("white", "black"))
# Plot
ggplot(promote_o, aes(x = x, y = y, fill=count)) +
geom_tile(width = 0.9, height = 0.9, color = "black") +
scale_x_continuous(breaks = 1:8, labels = c("a", "b", "c", "d", "e", "f", "g", "h"), limits = c(1, 8)) +
scale_y_continuous(breaks = 1:8, limits = c(1, 8)) +
scale_fill_viridis_c() +
coord_fixed() +
labs(title = paste("Who Wins with Opening Moves"),
subtitle = "Split on who won the game",
caption = "The count is using a log scale to be able to see lower values.",
fill = "Count",
x =  "Column", y = "Row") +
theme_bw() +
facet_wrap(~ player)
# Get data
promote_o <- read.csv("./UseableCSV/promote_opening.csv")
# Change moves into positions, and flip board
# e4 -> (5, 4)
promote_o <- promote_o %>%
rowwise() %>%
mutate(pos = if_else(player == "black", list(move_to_pos(first_move)), list(move_to_pos(first_move)))) %>%
unnest_wider(pos, names_sep = "_") %>%
rename(x = pos_1, y = pos_2)
promote_o$player <- factor(promote_o$player, levels = c("white", "black"))
# Plot
ggplot(promote_o, aes(x = x, y = y, fill=count)) +
geom_tile(width = 0.9, height = 0.9, color = "black") +
scale_x_continuous(breaks = 1:8, labels = c("a", "b", "c", "d", "e", "f", "g", "h"), limits = c(1, 8)) +
scale_y_continuous(breaks = 1:8, limits = c(1, 8)) +
scale_fill_viridis_c() +
coord_fixed() +
labs(title = paste("Who Wins with Opening Moves"),
subtitle = "Split on who won the game",
caption = "The count is using a log scale to be able to see lower values.",
fill = "Count",
x =  "Column", y = "Row") +
theme_bw() +
facet_wrap(~ player)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(viridis)
# Convert square ID to x, y
square_to_pos <- function(square) {
# Calculate the x and y positions
x <- (square %% 8) + 1
y <- (square %/% 8) + 1
return(c(x, y))
}
# Convert square name to x, y
move_to_pos <- function(square) {
# Column index (index at 1)
x <- utf8ToInt(substr(square, 1, 1)) - utf8ToInt("a") + 1
# Row number as integer
y <- as.integer(substr(square, 2, 2))
return(c(x, y))
}
flip_move_to_pos <- function(square) {
# Column index (index at 1)
x <- 9 - utf8ToInt(substr(square, 1, 1)) - utf8ToInt("a") + 1
# Row number as integer
y <- 9 - as.integer(substr(square, 2, 2))
return(c(x, y))
}
# Rotate the board for black
flip_square_pos <- function(square) {
# Flip
square <- 63 - square
# Calculate the x and y positions
x <- (square %% 8) + 1
y <- (square %/% 8) + 1
return(c(x, y))
}
# Get data
promote_o <- read.csv("./UseableCSV/promote_opening.csv")
# Change moves into positions, and flip board
# e4 -> (5, 4)
promote_o <- promote_o %>%
rowwise() %>%
mutate(pos = if_else(player == "black", list(flipmove_to_pos(first_move)), list(move_to_pos(first_move)))) %>%
unnest_wider(pos, names_sep = "_") %>%
rename(x = pos_1, y = pos_2)
# Get data
promote_o <- read.csv("./UseableCSV/promote_opening.csv")
# Change moves into positions, and flip board
# e4 -> (5, 4)
promote_o <- promote_o %>%
rowwise() %>%
mutate(pos = if_else(player == "black", list(flip_move_to_pos(first_move)), list(move_to_pos(first_move)))) %>%
unnest_wider(pos, names_sep = "_") %>%
rename(x = pos_1, y = pos_2)
promote_o$player <- factor(promote_o$player, levels = c("white", "black"))
# Plot
ggplot(promote_o, aes(x = x, y = y, fill=count)) +
geom_tile(width = 0.9, height = 0.9, color = "black") +
scale_x_continuous(breaks = 1:8, labels = c("a", "b", "c", "d", "e", "f", "g", "h"), limits = c(1, 8)) +
scale_y_continuous(breaks = 1:8, limits = c(1, 8)) +
scale_fill_viridis_c() +
coord_fixed() +
labs(title = paste("Who Wins with Opening Moves"),
subtitle = "Split on who won the game",
caption = "The count is using a log scale to be able to see lower values.",
fill = "Count",
x =  "Column", y = "Row") +
theme_bw() +
facet_wrap(~ player)
# Get data
promote_o <- read.csv("./UseableCSV/promote_opening.csv")
# Change moves into positions, and flip board
# e4 -> (5, 4)
promote_o <- promote_o %>%
rowwise() %>%
mutate(pos = if_else(player == "black", list(move_to_pos(first_move)), list(move_to_pos(first_move)))) %>%
unnest_wider(pos, names_sep = "_") %>%
rename(x = pos_1, y = pos_2)
promote_o$player <- factor(promote_o$player, levels = c("white", "black"))
# Plot
ggplot(promote_o, aes(x = x, y = y, fill=count)) +
geom_tile(width = 0.9, height = 0.9, color = "black") +
scale_x_continuous(breaks = 1:8, labels = c("a", "b", "c", "d", "e", "f", "g", "h"), limits = c(1, 8)) +
scale_y_continuous(breaks = 1:8, limits = c(1, 8)) +
scale_fill_viridis_c() +
coord_fixed() +
labs(title = paste("Who Wins with Opening Moves"),
subtitle = "Split on who won the game",
caption = "The count is using a log scale to be able to see lower values.",
fill = "Count",
x =  "Column", y = "Row") +
theme_bw() +
facet_wrap(~ player)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(viridis)
# Convert square ID to x, y
square_to_pos <- function(square) {
# Calculate the x and y positions
x <- (square %% 8) + 1
y <- (square %/% 8) + 1
return(c(x, y))
}
# Rotate the board for black
flip_square_pos <- function(square) {
# Flip
square <- 63 - square
# Calculate the x and y positions
x <- (square %% 8) + 1
y <- (square %/% 8) + 1
return(c(x, y))
}
# Convert square name to x, y
move_to_pos <- function(square) {
# Column index (index at 1)
x <- utf8ToInt(substr(square, 1, 1)) - utf8ToInt("a") + 1
# Row number as integer
y <- as.integer(substr(square, 2, 2))
return(c(x, y))
}
flip_move_to_pos <- function(square) {
pos <- move_to_pos(square)
x <- 9 - pos[1]
y <- 9 - pos[2]
return(c(x, y))
}
# Get data
promote_o <- read.csv("./UseableCSV/promote_opening.csv")
# Change moves into positions, and flip board
# e4 -> (5, 4)
promote_o <- promote_o %>%
rowwise() %>%
mutate(pos = if_else(player == "black", list(move_to_pos(first_move)), list(move_to_pos(first_move)))) %>%
unnest_wider(pos, names_sep = "_") %>%
rename(x = pos_1, y = pos_2)
promote_o$player <- factor(promote_o$player, levels = c("white", "black"))
# Plot
ggplot(promote_o, aes(x = x, y = y, fill=count)) +
geom_tile(width = 0.9, height = 0.9, color = "black") +
scale_x_continuous(breaks = 1:8, labels = c("a", "b", "c", "d", "e", "f", "g", "h"), limits = c(1, 8)) +
scale_y_continuous(breaks = 1:8, limits = c(1, 8)) +
scale_fill_viridis_c() +
coord_fixed() +
labs(title = paste("Promote"),
subtitle = "",
caption = "",
fill = "Count",
x =  "Column", y = "Row") +
theme_bw() +
facet_wrap(~ player)
# Get data
promote_o <- read.csv("./UseableCSV/promote_opening.csv")
# Change moves into positions, and flip board
# e4 -> (5, 4)
promote_o <- promote_o %>%
rowwise() %>%
mutate(pos = if_else(player == "black", list(flip_move_to_pos(first_move)), list(move_to_pos(first_move)))) %>%
unnest_wider(pos, names_sep = "_") %>%
rename(x = pos_1, y = pos_2)
promote_o$player <- factor(promote_o$player, levels = c("white", "black"))
# Plot
ggplot(promote_o, aes(x = x, y = y, fill=count)) +
geom_tile(width = 0.9, height = 0.9, color = "black") +
scale_x_continuous(breaks = 1:8, labels = c("a", "b", "c", "d", "e", "f", "g", "h"), limits = c(1, 8)) +
scale_y_continuous(breaks = 1:8, limits = c(1, 8)) +
scale_fill_viridis_c() +
coord_fixed() +
labs(title = paste("Promote"),
subtitle = "",
caption = "",
fill = "Count",
x =  "Column", y = "Row") +
theme_bw() +
facet_wrap(~ player)
# Get data
promote_o <- read.csv("./UseableCSV/promote_opening.csv")
# Change moves into positions, and flip board
# e4 -> (5, 4)
promote_o <- promote_o %>%
rowwise() %>%
mutate(pos = if_else(player == "black", list(move_to_pos(first_move)), list(move_to_pos(first_move)))) %>%
unnest_wider(pos, names_sep = "_") %>%
rename(x = pos_1, y = pos_2)
promote_o$player <- factor(promote_o$player, levels = c("white", "black"))
# Create a custom y-axis label function
y_labels <- function(player) {
if (player == "black") {
return(rev(1:8))
} else {
return(1:8)
}
}
# Plot
ggplot(promote_o, aes(x = x, y = y, fill=count)) +
geom_tile(width = 0.9, height = 0.9, color = "black") +
scale_x_continuous(breaks = 1:8, labels = c("a", "b", "c", "d", "e", "f", "g", "h"), limits = c(1, 8)) +
scale_y_continuous(breaks = 1:8, limits = c(1, 8)) +
scale_fill_viridis_c() +
coord_fixed() +
labs(title = paste("Promote"),
subtitle = "",
caption = "Blacks Board is flipped to be from the perspective of black",
fill = "Count",
x =  "Column", y = "Row") +
theme_bw() +
facet_wrap(~ player)
# Get data
promote_o <- read.csv("./UseableCSV/promote_opening.csv")
# Change moves into positions, and flip board
# e4 -> (5, 4)
promote_o <- promote_o %>%
rowwise() %>%
mutate(pos = if_else(player == "black", list(move_to_pos(first_move)), list(move_to_pos(first_move)))) %>%
unnest_wider(pos, names_sep = "_") %>%
rename(x = pos_1, y = pos_2)
promote_o$player <- factor(promote_o$player, levels = c("white", "black"))
# Create a custom y-axis label function
y_labels <- function(player) {
if (player == "black") {
return(rev(1:8))
} else {
return(1:8)
}
}
# Plot
ggplot(promote_o, aes(x = x, y = y, fill=count)) +
geom_tile(width = 0.9, height = 0.9, color = "black") +
scale_x_continuous(breaks = 1:8, labels = c("a", "b", "c", "d", "e", "f", "g", "h"), limits = c(1, 8)) +
scale_y_continuous(breaks = 1:8, limits = c(1, 8)) +
scale_fill_viridis_c() +
coord_fixed() +
labs(title = paste("How to get a Promotion"),
subtitle = "... in chess",
caption = "Most common first move in a game where there is a promotion",
fill = "Count",
x =  "Column", y = "Row") +
theme_bw() +
facet_wrap(~ player)
# Get data
promote_o <- read.csv("./UseableCSV/promote_opening.csv")
# Change moves into positions, and flip board
# e4 -> (5, 4)
promote_o <- promote_o %>%
rowwise() %>%
mutate(pos = if_else(player == "black", list(move_to_pos(first_move)), list(move_to_pos(first_move)))) %>%
unnest_wider(pos, names_sep = "_") %>%
rename(x = pos_1, y = pos_2)
promote_o$player <- factor(promote_o$player, levels = c("white", "black"))
# Create a custom y-axis label function
y_labels <- function(player) {
if (player == "black") {
return(rev(1:8))
} else {
return(1:8)
}
}
# Plot
ggplot(promote_o, aes(x = x, y = y, fill=count)) +
geom_tile(width = 0.9, height = 0.9, color = "black") +
scale_x_continuous(breaks = 1:8, labels = c("a", "b", "c", "d", "e", "f", "g", "h"), limits = c(1, 8)) +
scale_y_continuous(breaks = 1:8, limits = c(1, 8)) +
scale_fill_viridis_c() +
coord_fixed() +
labs(title = paste("How to get a Promotion"),
subtitle = "...in chess",
caption = "Most common first move in a game where there is a promotion",
fill = "Count",
x =  "Column", y = "Row") +
theme_bw() +
facet_wrap(~ player)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(viridis)
# Convert square ID to x, y
square_to_pos <- function(square) {
# Calculate the x and y positions
x <- (square %% 8) + 1
y <- (square %/% 8) + 1
return(c(x, y))
}
# Rotate the board for black
flip_square_pos <- function(square) {
# Flip
square <- 63 - square
# Calculate the x and y positions
x <- (square %% 8) + 1
y <- (square %/% 8) + 1
return(c(x, y))
}
# Convert square name to x, y
move_to_pos <- function(square) {
# Column index (index at 1)
x <- utf8ToInt(substr(square, 1, 1)) - utf8ToInt("a") + 1
# Row number as integer
y <- as.integer(substr(square, 2, 2))
return(c(x, y))
}
flip_move_to_pos <- function(square) {
pos <- move_to_pos(square)
x <- 9 - pos[1]
y <- 9 - pos[2]
return(c(x, y))
}
